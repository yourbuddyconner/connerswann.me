<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Conner Swann - Celo Protocol</title><link href="https://connerswann.me/" rel="alternate"></link><link href="https://connerswann.me/feeds/celo-protocol.atom.xml" rel="self"></link><id>https://connerswann.me/</id><updated>2021-09-13T00:00:00-07:00</updated><subtitle>Reliability Engineer</subtitle><entry><title>Optics: How to Ape ERC-20 Tokens With Etherscan</title><link href="https://connerswann.me/2021/09/optics-ape-erc20-etherscan.html" rel="alternate"></link><published>2021-09-13T00:00:00-07:00</published><updated>2021-09-13T00:00:00-07:00</updated><author><name>Conner Swann</name></author><id>tag:connerswann.me,2021-09-13:/2021/09/optics-ape-erc20-etherscan.html</id><summary type="html">&lt;h1&gt;Optics is Here&lt;/h1&gt;
&lt;p&gt;Optics is a new optimistic multi-chain communication standard developed by the Optics Core team at cLabs. &lt;a href="https://medium.com/celoorg/optics-is-here-42aa610675ce"&gt;Check out the release blog post on the Celo Medium blog here!&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;This release coincides with &lt;a href="https://www.defiforthepeople.org/"&gt;DeFi For the People&lt;/a&gt;, a truly massive incentive campaign that aims to attract dApp developers …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Optics is Here&lt;/h1&gt;
&lt;p&gt;Optics is a new optimistic multi-chain communication standard developed by the Optics Core team at cLabs. &lt;a href="https://medium.com/celoorg/optics-is-here-42aa610675ce"&gt;Check out the release blog post on the Celo Medium blog here!&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;This release coincides with &lt;a href="https://www.defiforthepeople.org/"&gt;DeFi For the People&lt;/a&gt;, a truly massive incentive campaign that aims to attract dApp developers to the Celo Ecosystem along with their killer dApps!&lt;/p&gt;
&lt;p&gt;Now that Optics has been deployed to Mainnet Ethereum, Celo, and Polygon, many are asking the obvious question: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Brother, how do I Ape?"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Read on dear Primate Friend, for in this blog post we will cover how to send ERC-20 tokens over the Optics bridge &lt;em&gt;(and be ready to take advantage of the soon-to-be-announced liquidity incentives)&lt;/em&gt; via Etherscan in lieu of a dedicated Optics GUI (which is actively in development!). &lt;/p&gt;
&lt;p&gt;Note: Bridging native assets (like ETH and MATIC) involves a slightly different (but very similar) process and will be discussed in a subsequent blog post.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2001 Astronaut" src="../../images/2021/2001-astronaut.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;READ THIS NOTE:&lt;/strong&gt;  ⚠️ &lt;em&gt;Optics is still an experimental technology. We are deploying it for the first time in mainnet environments, so it’s important to carefully evaluate the risks and only transact with funds you’re willing to play with!&lt;/em&gt; ⚠️&lt;/p&gt;
&lt;h1&gt;What We Need To Know&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;em&gt;Did you read the notes in the previous section? Good.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Optics is a highly complex mesh of inter-connected smart contracts, which we will mostly be glossing over in favor of aping ERC-20 tokens onto the bridge and reaching multi-chain enlightenment as fast as possible. If you are interested in learning more (and you &lt;em&gt;should be&lt;/em&gt;), here are some links to the Optics documentation in the github repo: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/celo-org/optics-monorepo/tree/main/docs"&gt;Optics Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/celo-org/optics-monorepo/blob/main/docs/architecture.md"&gt;Optics Channel Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/celo-org/optics-monorepo/blob/main/docs/xapps/token-bridge.md"&gt;Optics Token Bridge xApp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At a high-level we will need to do the following: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Authorize the Bridge to spend your tokens. &lt;/li&gt;
&lt;li&gt;Call the bridge to send your tokens.&lt;/li&gt;
&lt;li&gt;Wait patiently! &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, lets get a little clarity and build understanding about the parts we need to know about. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Optics Architecture" src="../../images/2021/Optics-Architecture.png"&gt;&lt;/p&gt;
&lt;h2&gt;The Home Contract&lt;/h2&gt;
&lt;p&gt;The Home contract is a hub of one-way communication between itself and replica contracts on an arbitrary number of remote blockchains. Messages are persisted to the Home blockchain by a "Cross-Chain App" (aka a xApp), and ferried to the replicas by a series of &lt;em&gt;off-chain agents&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;It is important to note that message-passing &lt;em&gt;is not instantaneous&lt;/em&gt;, as there is a ~3-hour dispute period, in addition to any confirmation time on the home chain, to see messages processed on a replica chain. &lt;/p&gt;
&lt;p&gt;Contract addresses for the mainnet Home and other core contracts can be found in the Optics Github Repository &lt;a href="https://github.com/celo-org/optics-monorepo/tree/main/rust/config/mainnet"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The Token Bridge&lt;/h2&gt;
&lt;p&gt;Now that we know roughly how an Optics channel works, we can go over the most important piece to a quickly evolving Bridge Ape -- The Token Bridge. &lt;/p&gt;
&lt;p&gt;The Token Bridge is a xApp, the first of its kind in the Optics Ecosystem, that facilitates token transfers between blockchains. If you know how to call its methods via Etherscan, you can send tokens across the bridge. &lt;/p&gt;
&lt;p&gt;Contract addresses for the various components of the Token Bridge can be found &lt;a href="https://github.com/celo-org/optics-monorepo/tree/main/rust/config/mainnet/bridge/1631143085018"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The ERC-20 Token&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-20/"&gt;ERC-20 Token Standard&lt;/a&gt; is an ingenious design that allows anyone to produce a fungible token that can fulfil a variety of functions. These tokens are programmable and composable, allowing for basic things like transfers between accounts and balance inquiries, but also complex functionality like the ability to approve that an amount can be spent on behalf of a holder by a third party account. &lt;/p&gt;
&lt;p&gt;The Optics Token Bridge facilitates the transfer of ERC-20 Tokens between blockchains. It does this by withdrawing the bridged token via the approval functionality (which we will discuss in detail in the next section), locking the token on the originating chain, and issuing an equivalent ERC-20 on the destination blockchain. &lt;/p&gt;
&lt;h2&gt;Etherscan&lt;/h2&gt;
&lt;p&gt;Etherscan is a &lt;em&gt;great tool&lt;/em&gt; for the Ethereum ecosystem. One feature that is well-known to DeFi Apes is the ability to natively call smart contract methods for any smart contract via a Metamask integration. We can utilize this functionality to our benefit to send tokens from Ethereum to Celo. &lt;/p&gt;
&lt;p&gt;It is important to note that this functionality is available on any blockchain where Etherscan is deployed. Since Etherscan is not deployed to Celo, you will not be able to send your tokens back to the originating chain via Metamask until the Optics GUI is released. But, &lt;em&gt;you didn't want to send them back anyways, right?&lt;/em&gt; &lt;/p&gt;
&lt;h1&gt;I am Become Bridge Ape&lt;/h1&gt;
&lt;p&gt;We're &lt;em&gt;almost&lt;/em&gt; to the point where we have enough information to become one with the bridge and achieve enlightenment. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Optics Obelisk" src="../../images/2021/obelisk.png"&gt;&lt;/p&gt;
&lt;h2&gt;Step One: Locate the Contract for the Token You're Bridging&lt;/h2&gt;
&lt;p&gt;First, we need to authorize the Token Bridge to spend our tokens on our behalf. In order to do this, we need to let the Token Contract know via the &lt;code&gt;approve&lt;/code&gt; method on the contract (a part of the ERC-20 standard). &lt;/p&gt;
&lt;p&gt;In order to view the implementation details of a contract, select the "Contract" tab. &lt;/p&gt;
&lt;p&gt;Note: The green checkmark indicates that the source code of the contract has been verified on Etherscan. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Contract Details Button" src="../../images/2021/how2ape/contract-details-button.png"&gt;&lt;/p&gt;
&lt;p&gt;The token addresses for my favorite ETH Tokens are below: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://etherscan.io/address/0xdac17f958d2ee523a2206206994597c13d831ec7"&gt;USDT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://etherscan.io/token/0x6b3595068778dd592e39a122f4f5a5cf09c90fe2"&gt;SUSHI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the purposes of this blog post we will be bridging USDT, however the process will be nearly identical for any ERC-20 token. &lt;/p&gt;
&lt;h2&gt;Step Two: Locate the Bridge Router Contract&lt;/h2&gt;
&lt;p&gt;As mentioned in the previous section, bridge contract addresses on each blockchain can be found &lt;a href="https://github.com/celo-org/optics-monorepo/tree/main/rust/config/mainnet/bridge/1631143085018"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Optics is deployed in an upgradeable configuration, with &lt;em&gt;implementation contracts&lt;/em&gt; being pointed to by &lt;em&gt;proxy contracts&lt;/em&gt;. This allows us to upgrade the contract implementation via governance without having to migrate contract state (which lives in the proxy). &lt;/p&gt;
&lt;p&gt;We want to interact with the BridgeRouter proxy contract which can be found on Etherscan &lt;a href="https://etherscan.io/address/0x6a39909e805A3eaDd2b61fFf61147796ca6aBB47"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;h1&gt;Step Three: Understand the Token's Approve Method&lt;/h1&gt;
&lt;p&gt;Click around the Etherscan UI until you have the approve method expanded. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Approve ERC-20 Transfer" src="../../images/2021/how2ape/approve-erc-20.png"&gt;&lt;/p&gt;
&lt;p&gt;The ERC-20 &lt;code&gt;approve&lt;/code&gt; method takes two arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_spender&lt;/code&gt; - The address which we want to grant the ability to spend our tokens&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_value&lt;/code&gt; - The number of tokens we want to grant the ability to spend, denominated &lt;strong&gt;in that token's smallest unit&lt;/strong&gt;. For most tokens this is 10^18, however for USDT it is 10^6! The &lt;code&gt;+&lt;/code&gt; button will help you fill in the right number. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: approving too much is usually ok, but not approving enough will cause the subsequent bridge transaction to fail. &lt;/p&gt;
&lt;p&gt;Example values we will use here are as follows: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_spender&lt;/code&gt;: &lt;code&gt;0x6a39909e805A3eaDd2b61fFf61147796ca6aBB47&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_amount&lt;/code&gt;: &lt;code&gt;10000000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will authorize the BridgeRouter to spend &lt;code&gt;10 USDT&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;Step Two: Locate the BridgeRouter's "Send" Method&lt;/h2&gt;
&lt;p&gt;As mentioned, the contract we're looking at is a proxy, so we want to write to it using the "Write as Proxy" feature.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Write as Proxy" src="../../images/2021/how2ape/write-as-proxy-button.png"&gt;&lt;/p&gt;
&lt;p&gt;There is a list of methods available to us, the most important one to a Bridge Ape is the &lt;code&gt;send&lt;/code&gt; method. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Send Method" src="../../images/2021/how2ape/send-method.png"&gt;&lt;/p&gt;
&lt;p&gt;Selecting the &lt;code&gt;send&lt;/code&gt; method expands the list of parameters which we will have to accurately fill in order to successfully send tokens across the bridge. &lt;/p&gt;
&lt;h2&gt;Step Three: Understand the Send Method&lt;/h2&gt;
&lt;p&gt;There are a series of parameters for the send method which we will have to fill out in order to Ape tokens across the bridge. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Send Method Details" src="../../images/2021/how2ape/send-method-details.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_token&lt;/code&gt; - The Contract Address of the ERC-20 token which we will be bridging.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_amount&lt;/code&gt; - The amount of the token to send, denominated &lt;strong&gt;in that token's smallest unit&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_destination&lt;/code&gt; - The domain of the destination chain. Domain IDs are like phone numbers, they are unique to each chain. &lt;ul&gt;
&lt;li&gt;A list of domains IDs can be found in the &lt;a href="https://github.com/celo-org/optics-monorepo/blob/main/rust/config/mainnet/ethereum_config.json#L21-L42"&gt;Ethereum replica configuration on Github&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;After examining that, we know that Celo's domain ID is &lt;code&gt;1667591279&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_recipient&lt;/code&gt; - The address of the recipient on the remote chain, bridged tokens will be sent to this address. &lt;ul&gt;
&lt;li&gt;To help support future chains with longer addresses, Optics uses 32-byte addresses. &lt;/li&gt;
&lt;li&gt;To convert an Ethereum, Celo, or Polygon address to bytes32 you can add 24 0's after the 0x Prefix. &lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x6a39909e805A3eaDd2b61fFf61147796ca6aBB47&lt;/code&gt; would become&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x0000000000000000000000006a39909e805A3eaDd2b61fFf61147796ca6aBB47&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;NOTE: Do not use the example recipient address in the following examples, make sure to use an address you control or else you will lose access to yor bridged tokens.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Example Parameters for Bridging USDT from Ethereum to Celo are as follows: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_token&lt;/code&gt;: &lt;code&gt;0xdac17f958d2ee523a2206206994597c13d831ec7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_amount&lt;/code&gt;: &lt;code&gt;10000000&lt;/code&gt; // 10 USDT&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_destination&lt;/code&gt;: &lt;code&gt;1667591279&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_recipient&lt;/code&gt;: &lt;code&gt;0x0000000000000000000000006a39909e805A3eaDd2b61fFf61147796ca6aBB47&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step Four: Connect Metamask&lt;/h2&gt;
&lt;p&gt;Using the Metamask integration within Etherscan, we can use the parameters above to submit a transaction that sends bridged tokens. &lt;/p&gt;
&lt;p&gt;First, select the "Connect to Web3" button on the contract UI. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Connect to Web3" src="../../images/2021/how2ape/connect-to-web3.png"&gt;&lt;/p&gt;
&lt;p&gt;Select Metamask&lt;/p&gt;
&lt;p&gt;&lt;img alt="Connect Metamask" src="../../images/2021/how2ape/connect-metamask.png"&gt;&lt;/p&gt;
&lt;p&gt;Then, walk through the Metamask connector flow by selecting an address. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Select Address" src="../../images/2021/how2ape/select-wallet.png"&gt;&lt;/p&gt;
&lt;p&gt;Confirm the selection and connect.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Confirm and Connect" src="../../images/2021/how2ape/confirm-and-connect.png"&gt;&lt;/p&gt;
&lt;p&gt;You should see that metamask is now reporting it is connected with the current website. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Metamask Connected" src="../../images/2021/how2ape/metamask-connected.png"&gt;&lt;/p&gt;
&lt;p&gt;You can verify this in Etherscan as well, you might have to click the "Connect to Web3" button again in order to get it to pick up the change.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Etherscan Connected" src="../../images/2021/how2ape/etherscan-connected.png"&gt;&lt;/p&gt;
&lt;p&gt;If all of this was successful, &lt;em&gt;you are ready for true Enlightenment&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Step Five: APE!&lt;/h2&gt;
&lt;p&gt;Now, we can put it all together. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authorize BridgeRouter to spend your USDT via &lt;a href="https://etherscan.io/address/0xdac17f958d2ee523a2206206994597c13d831ec7#writeContract"&gt;USDT Contract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_spender&lt;/code&gt;: &lt;code&gt;0x6a39909e805A3eaDd2b61fFf61147796ca6aBB47&lt;/code&gt; // Ethereum BridgeRouter Address&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_amount&lt;/code&gt;: &lt;code&gt;10000000&lt;/code&gt; // 10 USDT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Authorize USDT" src="../../images/2021/how2ape/authorize-usdt.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send Tokens via &lt;a href="https://etherscan.io/address/0x6a39909e805A3eaDd2b61fFf61147796ca6aBB47#writeProxyContract"&gt;BridgeRouter Contract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_token&lt;/code&gt;: &lt;code&gt;0xdac17f958d2ee523a2206206994597c13d831ec7&lt;/code&gt; // USDT Contract Address&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_amount&lt;/code&gt;: &lt;code&gt;10000000&lt;/code&gt; // 10 USDT&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_destination&lt;/code&gt;: &lt;code&gt;1667591279&lt;/code&gt; // CELO Domain &lt;/li&gt;
&lt;li&gt;&lt;code&gt;_recipient&lt;/code&gt;: &lt;code&gt;0x0000000000000000000000006a39909e805A3eaDd2b61fFf61147796ca6aBB47&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Please for the love of Ape -- use your own address here&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Send USDT" src="../../images/2021/how2ape/send-usdt.png"&gt;&lt;/p&gt;
&lt;h2&gt;Step Six: Wait Patiently&lt;/h2&gt;
&lt;p&gt;Through your hard work and understanding the heavens have aligned  -- You see Bridge Nirvana. You are now one with The Bridge. Your universal consciousness has become untethered from the worldly shackles of one particular blockchain and you can now be &lt;em&gt;truly free.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2001 Optics Baby" src="../../images/2021/2001-baby.png"&gt;&lt;/p&gt;
&lt;p&gt;You have achieved true Bridge Ape Enlightenment. You are become Bridge Ape. &lt;/p&gt;
&lt;p&gt;Make yourself a coffee, and also probably some lunch and maybe even a snack. In about 3 hours your bridged tokens will arrive in your wallet, ready for providing liquidity or swapping, or whatever purpose your big giant galaxy brain can come up with. &lt;/p&gt;
&lt;h2&gt;Step Seven: Let Me Know How It Went!&lt;/h2&gt;
&lt;p&gt;Seriously, I would &lt;em&gt;love&lt;/em&gt; to hear from you. &lt;/p&gt;
&lt;p&gt;I have so many questions for you!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What tokens did you bridge? &lt;/li&gt;
&lt;li&gt;How long did it take? &lt;/li&gt;
&lt;li&gt;How was your experience Aping via Etherscan? &lt;/li&gt;
&lt;li&gt;Can you hear my thoughts now? &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reach out to me on &lt;a href="https://twitter.com/YourBuddyConner"&gt;Twitter&lt;/a&gt;, lets be friends! &lt;/p&gt;
&lt;p&gt;And seriously, thank you for trying this out, it means a lot! &lt;/p&gt;</content><category term="Celo Protocol"></category><category term="Optics"></category><category term="Celo"></category><category term="Etherscan"></category><category term="Apes Together Strong"></category><category term="ERC-20"></category></entry><entry><title>Celo: The Infra Running the Espero Ceremony</title><link href="https://connerswann.me/2021/05/celo-espero-infrastructure.html" rel="alternate"></link><published>2021-05-01T00:00:00-07:00</published><updated>2021-05-01T00:00:00-07:00</updated><author><name>Conner Swann</name></author><id>tag:connerswann.me,2021-05-01:/2021/05/celo-espero-infrastructure.html</id><summary type="html">&lt;h1&gt;Who is This Post For?&lt;/h1&gt;
&lt;p&gt;This article was designed for technical readers who are interested in doing any of the following: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Someone who is going to fork Espero and run their own MPC Ceremony.&lt;/li&gt;
&lt;li&gt;Someone who has participated in MPCs in the past and wants to know how Espero is …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Who is This Post For?&lt;/h1&gt;
&lt;p&gt;This article was designed for technical readers who are interested in doing any of the following: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Someone who is going to fork Espero and run their own MPC Ceremony.&lt;/li&gt;
&lt;li&gt;Someone who has participated in MPCs in the past and wants to know how Espero is &lt;em&gt;different&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Someone who wants to use the output of Phase 1 and use it to do their own Phase 2 setup &lt;/li&gt;
&lt;li&gt;Someone who wants to use the output of Phase 1 with a universal SNARK such as PLONK or Marlin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This initial post is a general primer on Plumo and the Espero Ceremony, what they do, and how it all works — from both a high-level perspective and that of the Human operator of the ceremony.  Another post will follow describing the strategy one must have when considering the prospect of their own Phase 2 ceremony. &lt;/p&gt;
&lt;h2&gt;Want To Get Involved?&lt;/h2&gt;
&lt;p&gt;The Espero ceremony is only getting started! If you missed out on Phase 1, there is still &lt;em&gt;plenty&lt;/em&gt; of time to sign up and contribute to Phase 2 of the Trusted Setup. Simply run a network speed test and &lt;a href="https://docs.google.com/forms/d/1UXrYBDZTKxZEQDFu7VnbJ_KuNMOzJDx_SPx3tp3U3G0/viewform"&gt;fill out this Google Form&lt;/a&gt; -- we would &lt;em&gt;love&lt;/em&gt; to have you!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="We Want You" src="../../images/2021/wewantyou.png"&gt;&lt;/p&gt;
&lt;h1&gt;What is Celo?&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://celo.org/"&gt;Celo&lt;/a&gt; is a Cryptocurrency protocol that I contribute to as part of the cLabs team. cLabs's Mission is to ensure the conditions of "Financial Prosperity for all," which we are executing on by building the ecosystem's first mobile-first blockchain. For many people globally, banking and payments infrastructure is non-existent or hard to get access to -- Celo's goal is to fill that gap. &lt;/p&gt;
&lt;p&gt;In the words of &lt;a href="https://www.coindesk.com/libra-minus-facebook-why-celo-is-2020s-buzzy-token-project"&gt;Polychain Capital President, Joe Eagan&lt;/a&gt;, “The Celo mobile app, bringing stable payments and remittances to the unbanked, has a chance to bring broad swaths of people to the world of blockchain technology and crypto, but to also level up the economic well-being of those most in need across the globe."&lt;/p&gt;
&lt;p&gt;For more details on what Celo is doing and how it does it, I highly recommend checking out &lt;a href="https://medium.com/celoorg/why-build-on-the-celo-blockchain-9ceab3d11b70"&gt;this post&lt;/a&gt; on the cLabs Blog by the cLabs CTO Marek Olszewski.&lt;/p&gt;
&lt;h2&gt;What is Plumo?&lt;/h2&gt;
&lt;p&gt;Since I am hardly an expert on the cryptography involved here, I will mostly be quoting &lt;a href="https://medium.com/celoorg/the-plumo-ceremony-ac7649e9c8d8"&gt;this great post&lt;/a&gt; on the cLabs Engineering Blog about Plumo.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Plumo is a zero-knowledge SNARK based syncing protocol that takes the “lightest sync” mode to the next level. By reducing the time and data needed to sync the blockchain by multiple orders of magnitude, Plumo enables even the most resource constrained mobile devices to transact trustlessly on the Celo network.&lt;/p&gt;
&lt;p&gt;The SNARK at the heart of Plumo enables light clients to sync with the Celo network via ultra-light sync mode. A single SNARK generated by the Plumo protocol can verify over 100 epoch headers instantaneously, allowing light clients to verify this in a quick, light, and trustless way. This results in sync speeds that are orders of magnitude faster, with improvements in the amount of data you need to sync with the Celo network by a factor of around 1,000,000 relative to other networks.&lt;/p&gt;
&lt;p&gt;Plumo is one of the largest SNARKs to be deployed. Internally, it proves the correctness of the evolution of Celo epochs, just as a light client would have seen. This means that essentially it proves the light client protocol. It does this through verifying over 100 BLS signatures that use a combination of a Bowe-Hopwood variant of a Pedersen hash and Blake2s for its hash to curve, and performs the consistency checks of validator elections, asserting that ⅔ of the validator set agreed on the next set. Plumo uses the two-chain of BLS12–377 and BW6 to create BW6 proofs that ultra-light clients verify. This allows them to verify a large number of epochs by verifying a single SNARK proof.&lt;/p&gt;
&lt;p&gt;The SNARK requires one final step before it can go live on mainnet — the Plumo MPC Ceremony, which requires the help of Celo friends and community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;What is Espero?&lt;/h1&gt;
&lt;p&gt;Espero is the proper noun used to describe the Plumo Ceremony, again quoting from the blog post: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Multi-Party-Computation (MPC) is a cryptographic mechanism for different parties to jointly perform a computation. SNARK circuits require a “trusted setup” where parties work together to generate shared parameters that can be used to prove and verify SNARKs. If one person ran this setup, then they could potentially prove incorrect things by exploiting a backdoor in the circuit. However, with an MPC, this setup process is split amongst tens or hundreds of contributors, and if even one of the participants is honest (keeps their inputs private), then the system will be secure.&lt;/p&gt;
&lt;p&gt;In the case of the Plumo Ceremony, this collective computation will be a series of joint actions done by a group of participants from within the Celo community and beyond. They will be working to perform an MPC that secures the SNARK proving the Plumo ultralight client protocol.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Espero improves on top of the existing MPC implementations by introducing the option of optimistic parallel computation. This is possible since contributions are &lt;em&gt;commutative&lt;/em&gt;. As in, it doesn’t matter in which order participants contribute. Additionally, elements being contributed to can also be worked on independently of one another. Utilizing these properties, Espero divides the contributions into smaller chunks on which participants work in parallel. That works well as long as all the participants contribute to all of the chunks. &lt;/p&gt;
&lt;p&gt;As usual, there’s no free lunch. If even one of the participants decides to stop contributing or maliciously makes a bad contribution, the whole set of contributions that were produced in parallel must be thrown away. This is an organizational consideration that must be made, but there is no risk to security since everything is verifiable. This kind of trade off makes sense when the parameter size is large and you want to make quick progress, but are willing to do more work as the coordinator of the setup to gain confidence that participants will complete their contribution across all the chunks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The ceremony will consist of rounds of about 6–10 participants each running the Plumo setup software for a certain period of time. Each round will last approximately 36 hours. While much of the activity is passive and involves simply running the computation on a desktop machine, for the Ceremony participants should feel confident with running commands in the terminal and destroying USB keys. This will allow participants to feel comfortable with the commitment so that the Ceremony can run smoothly.&lt;/p&gt;
&lt;p&gt;The SNARK being secured by the Plumo Ceremony is one of the most complex yet powerful SNARKs to ever be secured, and the outcome can be used not only by cLabs &amp;amp; the Plumo construction, but also by any project that uses the BW6 curve with the Groth16 proving system or any other based on polynomial commitments. By participating in this Ceremony, participants can be part of something that is a public good, and will hopefully be used to power many more systems to come.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Architecture Diagram&lt;/h2&gt;
&lt;p&gt;Before getting in too deep, let’s look at the system from a high level and identify all the major parts. Below is an architecture diagram outlining the system, including the Microsoft Azure services that were used. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Espero Ceremony Architecture Diagram" src="../../images/2021/espero-ceremony-architecture.png"&gt;&lt;/p&gt;
&lt;p&gt;Important Pieces: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ceremony Coordinator:&lt;/strong&gt; The brains of the whole ceremony, authenticates users via Public Key signatures and coordinates the metadata required to operate the ceremony efficiently. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ceremony Contributor:&lt;/strong&gt; The brawn of the ceremony, it communicates via signed HTTP packets with the coordinator. It retrieves chunks to be processed and uploads them to Azure Block Storage when complete.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ceremony Verifier:&lt;/strong&gt; Communicates with the coordinator, waiting for new contributions and verifying them on the fly. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ceremony Monitor:&lt;/strong&gt; Observes changes in the Coordinator API, emitting logs that can be used for Alerting on important changes in ceremony state. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure Front Door:&lt;/strong&gt; Used for DDoS mitigation, easy to set up. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure Storage Account:&lt;/strong&gt; Used to store and retrieve chunks, also easy to set up and use. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes: and Helm&lt;/strong&gt;: Used to deploy and manage the various processes that must run in order to facilitate the ceremony. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terraform:&lt;/strong&gt; Used to wire up and deploy all the various pieces of infrastructure, including Kubernetes Clusters, Load Balancers, and other cloud resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Okay, But How Does it &lt;em&gt;Work&lt;/em&gt;?&lt;/h2&gt;
&lt;p&gt;At the end of the day, the Espero Ceremony is a Typescript JSON API Server that responds to HTTP Requests from various other actors in the system, secured with the same public key cryptography that is the basis for the Celo (and Ethereum) blockchain. Users who desire to contribute to the ceremony generate a keypair and share the public key with the Ceremony operator, then signing their HTTP requests for authentication. Optionally (but recommended), contributors may also publish an attestation to a public channel like Twitter (&lt;a href="https://twitter.com/YourBuddyConner/status/1339663701498982400"&gt;here's mine!&lt;/a&gt;) -- this is to ensure that all of the individuals participating are associated with unique real-world identities (or psuedo-identities) and not just one or more entities colluding. &lt;/p&gt;
&lt;p&gt;The Espero ceremony is particularly notable because it is split up into rounds, allowing a small number of participants to contribute their computations in parallel -- a novel innovation in the MPC ecosystem. Other MPC Ceremonies like the OG &lt;a href="https://github.com/ebfull/powersoftau"&gt;Perpetual Powers of Tau&lt;/a&gt; only allow for one participant at a time. While this architecture is not necessarily a limitation based on pure math, parallelizing it does allow for larger groups to be involved at once.&lt;/p&gt;
&lt;p&gt;Without getting too deep into the crypto, the gist of an MPC is you download something called a "Structured Reference String," do some computation with it as input, and return the output for the next participant to operate against. &lt;strong&gt;It's like a giant game of &lt;em&gt;crypto telephone&lt;/em&gt;, where each step along the way is 100% verifiable.&lt;/strong&gt; The Structured Reference String consists of four vectors of varying size (see below diagram), each containing field elements from one of two Groups &lt;code&gt;G1&lt;/code&gt; and &lt;code&gt;G2&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;In order to facilitate multiple users in a round, the Structured Reference String is split up into many &lt;em&gt;chunks&lt;/em&gt; which consist of slices of the field elements that are to be operated upon. Contributors acquire a "lock" on a chunk, download the chunk's contents, process the computation, and upload the results back to Azure to be verified. &lt;/p&gt;
&lt;p&gt;The below diagram describes logically how the chunks are split: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Espero Ceremony Infographic" src="../../images/2021/espero-ceremony-infographic.png"&gt;&lt;/p&gt;
&lt;p&gt;While it allows for parallelism in terms of how many users can participate, there is a major constraint to this architecture in that each chunk can only be operated upon by one participant at a time. This requires a high level of coordination by both the party operating the ceremony as well as the individual participating in the ceremony. &lt;/p&gt;
&lt;p&gt;Fortunately, we at cLabs have provided a handy &lt;a href="https://github.com/celo-org/snark-setup-operator"&gt;program, written in Rust&lt;/a&gt; that can be used to contribute. Pre-compiled versions of the code are provided on Github, but it is entirely possible (and encouraged) to both read the source code and compile the binary yourself!&lt;/p&gt;
&lt;p&gt;Below, we have a sequence diagram that gives a high-level overview of what the contribution binary is doing when you participate in the Plumo Setup.&lt;/p&gt;
&lt;script&gt;window.addEventListener("message", function(e) {var i = e.data.split(":")[1];var h = e.data.split(":")[2];if (e.data.split(":")[0] == "swimlanes-io" &amp;&amp; i &amp;&amp; h) {document.getElementById("__sw-io-" + i).setAttribute("style","height:" + h + "px");}}, false);&lt;/script&gt;
&lt;div id="__sw-io-lVHg"&gt;&lt;iframe style="border:none; width:100%; height:100%" scrolling="no" src="https://cdn.swimlanes.io/dist/embeded.html#lVHLUoMwFN3zFecHhFofCxbOWGSYagccaPfEcC2Z0gSTsNCvN9CHdWqrLnPvedxzYoVtKERsWtIKkZJWi5fOCiVR0FtHkhMeBFtqtva8/VppXNw5tNKVkMw9Q1z6yHuCseB1J1cGZRLPEXDStFbyvfQO4Bv2XixEtEXhschSlOPRCNlTedZw7GOm+ApR77YzG5yDUFRB43a/eA7EXoOqk5b3H50mTHo1FG7Glq6tq6+skdPwfgCdcOtHJK05TnYAvfbxrBUnYzasszXc+MfZ+Q5Pf2ng26cv8tn/urj1sWgbxSpXiWmVNOR5Ulm3yaklZmFrYdBu87w6JWK8Rie3I9f9cHkfI5tnmMTJNE2naVJ+Ag==#lVHg"&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;Since the ceremony coordinator is easily modelled as a traditional web service, it is trivial to then deploy it in containers to Kubernetes. For the remainder of this post, we're going to discuss the various parts of the deployment (included in the Open Source &lt;a href="https://github.com/celo-org/snark-setup-coordinator"&gt;Espero Coordinator Repository&lt;/a&gt;) in the hopes that it is both interesting and relevant to others who want to operate and/or extend the system. &lt;/p&gt;
&lt;h2&gt;Aside: Why Microsoft Azure?&lt;/h2&gt;
&lt;p&gt;Like any Cloud Platform, I see using Azure as a cost/benefit analysis for a given project. The major reason we at cLabs run workloads on Azure is because the Azure Hardware Security Module (HSM) supports the &lt;code&gt;secp256k1&lt;/code&gt; curve that is the basis for the public key cryptography in Celo (and the Espero Ceremony!). We use this feature for transaction signing among other things, and Google Cloud Platform (my cloud of choice) doesn't currently support this curve in their solution (booo!). Fortunately, Azure provides a perfectly serviceable (if incredibly opinionated/non-intuitive) Kubernetes environment for us to work with. &lt;/p&gt;
&lt;p&gt;Since we were already using Azure, we immediately took a couple tools off the shelf, including Azure Block Storage for chunk storage, Azure Front Door for DDoS mitigation (that we haven't required thus far), and Azure Kubernetes Service for workload management. &lt;/p&gt;
&lt;h2&gt;The Lifecycle of a Ceremony&lt;/h2&gt;
&lt;p&gt;Because there is some human intervention required in the Espero Ceremony, an additional actor is introduced called the &lt;code&gt;Operator&lt;/code&gt;. This entity, like the other actors in the system, authenticates to the Coordinator via private key. The entire lifecycle of the ceremony is managed by the &lt;code&gt;Coordinator&lt;/code&gt; and administered by the &lt;code&gt;Operator&lt;/code&gt;, including adding/removing participants, verifying each round, and transitioning between rounds.&lt;/p&gt;
&lt;p&gt;The operator commands are located in the control binary — so now let’s walk through initialization and the first round: &lt;/p&gt;
&lt;h3&gt;Ceremony Initialization&lt;/h3&gt;
&lt;p&gt;At the very beginning of the ceremony, chunks must be created and uploaded to Azure Block Storage. These make up the initial challenges that each participant in Round 0 will download, compute against, and re-upload. &lt;/p&gt;
&lt;h3&gt;Contributor Enrollment&lt;/h3&gt;
&lt;p&gt;The first thing we need to do after initializing the ceremony is add participants. We can do this by using the &lt;code&gt;add-participant&lt;/code&gt; method, passing an address generated via the &lt;code&gt;generate&lt;/code&gt; binary as the &lt;code&gt;--participant-id&lt;/code&gt; argument. &lt;/p&gt;
&lt;pre class="line-numbers"&gt;
&lt;code class="language-shell"&gt;
./target/release/control --coordinator-url https://plumo-example.azurefd.net \
--keys-file ~/plumo-verifier.keys \
add-participant \
--participant-id ADDRESS
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3&gt;Round Maintenance&lt;/h3&gt;
&lt;p&gt;Besides adding users, the control binary can be used to unstick the coordinator which is capable of getting into states where the ceremony cannot proceed -- especially if all participants do not complete their contribution as planned. Additionally, it's important to note that while the Operator can remove data that has already been contributed, it cannot forge data on behalf of a participant. This is ensured by the verifiable public key cryptography that underpins the Espero Ceremony and Plumo SNARK. &lt;/p&gt;
&lt;p&gt;Due to the way the Structured Reference String is broken up, as mentioned previously, each participant must complete their section of the computation on each chunk in order for the ceremony to proceed. There are a plethora of reasons a user could drop out of the ceremony, from slow/inconsistent internet connections to hardware failure. &lt;/p&gt;
&lt;p&gt;If &lt;code&gt;Participant A&lt;/code&gt; drops out in the middle of the ceremony there are several options: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have &lt;code&gt;Participant A&lt;/code&gt; share their private key with someone who may complete the contribution on their behalf, forfeiting some or all of the security guarantees of that particular contribution. &lt;/li&gt;
&lt;li&gt;Remove the participant, invalidating all chunks that &lt;code&gt;Participant A&lt;/code&gt; contributed and also invalidating any descendent chunks created by other participants that used &lt;code&gt;Participant A&lt;/code&gt;'s chunks as the basis for their own contributions. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This puts a strong emphasis on maintaining communication with participants and ensuring that private keys are not destroyed before the round is complete and verified. Removing users halfway through really degrades the user experience, so being proactive when this occurs can go a long way. &lt;/p&gt;
&lt;h3&gt;Round Verification&lt;/h3&gt;
&lt;p&gt;Because every contribution is signed and verifiable, the coordinator produces a &lt;em&gt;transcript&lt;/em&gt; that consists of every operation that was made. This transcript can then be verified by anyone as a chain of custody of sorts that shows the evolution of the Structured Reference String. &lt;/p&gt;
&lt;p&gt;Below is an example of a command that verifies a round: &lt;/p&gt;
&lt;pre class="line-numbers"&gt;
&lt;code class="language-shell"&gt;
./target/release/control --coordinator-url https://plumo-example.azurefd.net \
--keys-file ~/plumo-verifier.keys new-round \
-e EXPECTED_PARTICIPANT_1 -e EXPECTED_PARTICIPANT_2 \
--verify-transcript \
--publish
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3&gt;Alerting on Ceremony State&lt;/h3&gt;
&lt;p&gt;The Ceremony is structured such that participants are capable of shipping errors to the Coordinator, thereby notifying the Ceremony organizers of potential issues. The most common problem that pops up is simple networking issues, like localized DNS inconsistencies or global network partitions. These error logs are shipped to the Coordinator and show up in its logs to be consumed by alerting tools like the Azure Log Analytics Workspace. &lt;/p&gt;</content><category term="Celo Protocol"></category><category term="Celo"></category><category term="Plumo"></category><category term="SNARKs"></category><category term="Trusted Setup"></category></entry></feed>